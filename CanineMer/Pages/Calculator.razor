@using System.Linq
@using MatBlazor

<p>Input a dog's weight and lifestyle to see his or her maintenance energy requirement.</p>

<p>
    <MatTextField @bind-Value="@InputValue" OnInput="OnWeightInput" Label="Dog's Weight in Pounds:"></MatTextField>
</p>

@if (InputValue > 0)
{
    <p>
        <label>
            Dog's life stage:
            <select @bind="SelectedType">
                <option value="0">Select a value</option>
                @foreach (var factor in lifeStages)
                {
                    <option value="@((int)factor)">@factor.ToString().AddSpacesToPascalCase()</option>
                }
            </select>
        </label>
    </p>
}

<p>
    <label>
        
        <MatTextField @bind-Value="@KcalPerCup" OnInput="OnDogFoodKCalInput" Label="Dog Food kcal/cup (optional):"></MatTextField>

    </label>
</p>

<div class="card text-white bg-secondary my-2 py-2 text-center">
    <div class="card-body">
        <ResultsDisplay Model="ResultsVM" />
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <span class="text-danger">@errorMessage</span>
        }
    </div>
</div>

@code {
    private int inputValue = 45; // Default set to 45 lbs.
    private double? kcalPerCup = 445; // Optional kcal per cup, nullable to indicate not set
    private MerCalculatorResultsVM? ResultsVM { get; set; }
    private string? errorMessage;
    private int _selectedType = 2; // Default set to 2 (Adult)


    private void OnWeightInput(ChangeEventArgs args)
    {
        UpdateResults();
    }

    private void OnDogFoodKCalInput(ChangeEventArgs args)
    {
        UpdateResults();
    }

    private int SelectedType
    {
        get => _selectedType;
        set
        {
            _selectedType = value;
            UpdateResults();
        }
    }

    private int InputValue
    {
        get => inputValue;
        set
        {
            inputValue = value < 1 ? 1 : value; // Prevent values less than 1
            UpdateResults();
        }
    }

    private double? KcalPerCup
    {
        get => kcalPerCup;
        set
        {
            kcalPerCup = value < 0 ? 0 : value; // Prevent negative kcal, allow 0 or null
            UpdateResults();
        }
    }

    private readonly IEnumerable<LifeStageFactorsEnum> lifeStages = Enum.GetValues(typeof(LifeStageFactorsEnum))
        .Cast<LifeStageFactorsEnum>()
        .Where(f => f != LifeStageFactorsEnum.None)
        .OrderBy(f => f.ToString())
        .ToList();

    protected override void OnInitialized()
    {
        UpdateResults(); // Calculate and display results on initial render
    }

    private void UpdateResults()
    {
        try
        {
            if (_selectedType > 0 && inputValue > 0)
            {
                ResultsVM = MerCalculatorResultsVM.Calculate((LifeStageFactorsEnum)_selectedType, CanineMerCalculator.LbsToKg(inputValue));
                if (kcalPerCup.HasValue && kcalPerCup > 0)
                {
                    // Calculate cups to feed if kcal per cup is provided
                    ResultsVM.CupsLow = ResultsVM.LowerBounds / kcalPerCup.Value;
                    ResultsVM.CupsHigh = ResultsVM.UpperBounds / kcalPerCup.Value;
                    ResultsVM.CupsMean = ResultsVM.Mean / kcalPerCup.Value;
                }
                else
                {
                    // Reset cups if no kcal per cup
                    ResultsVM.CupsLow = null;
                    ResultsVM.CupsHigh = null;
                    ResultsVM.CupsMean = null;
                }
                errorMessage = null;
            }
            else
            {
                ResultsVM = null;
                errorMessage = "Please select a valid life stage and enter a positive weight.";
            }
        }
        catch (ArgumentOutOfRangeException ex)
        {
            ResultsVM = null;
            errorMessage = $"Invalid weight: {ex.Message}";
        }
        catch (ArgumentException ex)
        {
            ResultsVM = null;
            errorMessage = $"Invalid life stage: {ex.Message}";
        }
        catch (Exception ex)
        {
            ResultsVM = null;
            errorMessage = "An unexpected error occurred while calculating the results. Please try again.";
        }
    }
}